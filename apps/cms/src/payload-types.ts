/* tslint:disable */
/* eslint-disable */
/**
 * This file was automatically generated by Payload.
 * DO NOT MODIFY IT BY HAND. Instead, modify your source Payload config,
 * and re-run `payload generate:types` to regenerate this file.
 */

/**
 * Supported timezones in IANA format.
 *
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "supportedTimezones".
 */
export type SupportedTimezones =
  | 'Pacific/Midway'
  | 'Pacific/Niue'
  | 'Pacific/Honolulu'
  | 'Pacific/Rarotonga'
  | 'America/Anchorage'
  | 'Pacific/Gambier'
  | 'America/Los_Angeles'
  | 'America/Tijuana'
  | 'America/Denver'
  | 'America/Phoenix'
  | 'America/Chicago'
  | 'America/Guatemala'
  | 'America/New_York'
  | 'America/Bogota'
  | 'America/Caracas'
  | 'America/Santiago'
  | 'America/Buenos_Aires'
  | 'America/Sao_Paulo'
  | 'Atlantic/South_Georgia'
  | 'Atlantic/Azores'
  | 'Atlantic/Cape_Verde'
  | 'Europe/London'
  | 'Europe/Berlin'
  | 'Africa/Lagos'
  | 'Europe/Athens'
  | 'Africa/Cairo'
  | 'Europe/Moscow'
  | 'Asia/Riyadh'
  | 'Asia/Dubai'
  | 'Asia/Baku'
  | 'Asia/Karachi'
  | 'Asia/Tashkent'
  | 'Asia/Calcutta'
  | 'Asia/Dhaka'
  | 'Asia/Almaty'
  | 'Asia/Jakarta'
  | 'Asia/Bangkok'
  | 'Asia/Shanghai'
  | 'Asia/Singapore'
  | 'Asia/Tokyo'
  | 'Asia/Seoul'
  | 'Australia/Brisbane'
  | 'Australia/Sydney'
  | 'Pacific/Guam'
  | 'Pacific/Noumea'
  | 'Pacific/Auckland'
  | 'Pacific/Fiji';

export interface Config {
  auth: {
    users: UserAuthOperations;
  };
  blocks: {};
  collections: {
    users: User;
    media: Media;
    discordRoles: DiscordRole;
    categories: Category;
    subcategories: Subcategory;
    series: Series;
    pages: Page;
    tutorials: Tutorial;
    'payload-locked-documents': PayloadLockedDocument;
    'payload-preferences': PayloadPreference;
    'payload-migrations': PayloadMigration;
  };
  collectionsJoins: {};
  collectionsSelect: {
    users: UsersSelect<false> | UsersSelect<true>;
    media: MediaSelect<false> | MediaSelect<true>;
    discordRoles: DiscordRolesSelect<false> | DiscordRolesSelect<true>;
    categories: CategoriesSelect<false> | CategoriesSelect<true>;
    subcategories: SubcategoriesSelect<false> | SubcategoriesSelect<true>;
    series: SeriesSelect<false> | SeriesSelect<true>;
    pages: PagesSelect<false> | PagesSelect<true>;
    tutorials: TutorialsSelect<false> | TutorialsSelect<true>;
    'payload-locked-documents': PayloadLockedDocumentsSelect<false> | PayloadLockedDocumentsSelect<true>;
    'payload-preferences': PayloadPreferencesSelect<false> | PayloadPreferencesSelect<true>;
    'payload-migrations': PayloadMigrationsSelect<false> | PayloadMigrationsSelect<true>;
  };
  db: {
    defaultIDType: number;
  };
  globals: {
    nav: Nav;
    footer: Footer;
  };
  globalsSelect: {
    nav: NavSelect<false> | NavSelect<true>;
    footer: FooterSelect<false> | FooterSelect<true>;
  };
  locale: null;
  user: User & {
    collection: 'users';
  };
  jobs: {
    tasks: unknown;
    workflows: unknown;
  };
}
export interface UserAuthOperations {
  forgotPassword: {
    email: string;
    password: string;
  };
  login: {
    email: string;
    password: string;
  };
  registerFirstUser: {
    email: string;
    password: string;
  };
  unlock: {
    email: string;
    password: string;
  };
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "users".
 */
export interface User {
  id: number;
  updatedAt: string;
  createdAt: string;
  email: string;
  resetPasswordToken?: string | null;
  resetPasswordExpiration?: string | null;
  salt?: string | null;
  hash?: string | null;
  loginAttempts?: number | null;
  lockUntil?: string | null;
  sessions?:
    | {
        id: string;
        createdAt?: string | null;
        expiresAt: string;
      }[]
    | null;
  password?: string | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "media".
 */
export interface Media {
  id: number;
  alt: string;
  credit?: string | null;
  updatedAt: string;
  createdAt: string;
  url?: string | null;
  thumbnailURL?: string | null;
  filename?: string | null;
  mimeType?: string | null;
  filesize?: number | null;
  width?: number | null;
  height?: number | null;
  focalX?: number | null;
  focalY?: number | null;
  sizes?: {
    thumb?: {
      url?: string | null;
      width?: number | null;
      height?: number | null;
      mimeType?: string | null;
      filesize?: number | null;
      filename?: string | null;
    };
    medium?: {
      url?: string | null;
      width?: number | null;
      height?: number | null;
      mimeType?: string | null;
      filesize?: number | null;
      filename?: string | null;
    };
    large?: {
      url?: string | null;
      width?: number | null;
      height?: number | null;
      mimeType?: string | null;
      filesize?: number | null;
      filename?: string | null;
    };
  };
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "discordRoles".
 */
export interface DiscordRole {
  id: number;
  name: string;
  roleId: string;
  /**
   * Higher = more power (e.g., UnderBoss 90, Capo 80, ...)
   */
  rank: number;
  canEdit?: boolean | null;
  editorScopes?: {
    categories?: (number | Category)[] | null;
    subcategories?: (number | Subcategory)[] | null;
  };
  /**
   * Lowercase URL slug (auto-generated from title; you can edit).
   */
  slug?: string | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "categories".
 */
export interface Category {
  id: number;
  title: string;
  /**
   * Lowercase URL slug (auto-generated from title; you can edit).
   */
  slug: string;
  /**
   * Controls top-level menu order.
   */
  order?: number | null;
  /**
   * If true, do not show this category in the top menu.
   */
  navHidden?: boolean | null;
  /**
   * Default read/write policy for all descendants (pages, tutorials).
   */
  defaultVisibility?: {
    readPolicy?: ('public' | 'rank_at_least') | null;
    minReadRank?: number | null;
    allowRoleIds?: (number | DiscordRole)[] | null;
    hideInMenus?: boolean | null;
    writePolicy?: ('editor_roles_only' | 'rank_at_least') | null;
    minWriteRank?: number | null;
  };
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "subcategories".
 */
export interface Subcategory {
  id: number;
  category: number | Category;
  title: string;
  /**
   * Lowercase URL slug (auto-generated from title; you can edit).
   */
  slug: string;
  order?: number | null;
  /**
   * If true, do not show this subcategory in menus.
   */
  navHidden?: boolean | null;
  /**
   * Default read/write policy for all descendants (pages, tutorials).
   */
  defaultVisibility?: {
    readPolicy?: ('public' | 'rank_at_least') | null;
    minReadRank?: number | null;
    allowRoleIds?: (number | DiscordRole)[] | null;
    hideInMenus?: boolean | null;
    writePolicy?: ('editor_roles_only' | 'rank_at_least') | null;
    minWriteRank?: number | null;
  };
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "series".
 */
export interface Series {
  id: number;
  title: string;
  /**
   * Lowercase URL slug (auto-generated from title; you can edit).
   */
  slug: string;
  description?: string | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "pages".
 */
export interface Page {
  id: number;
  category: number | Category;
  /**
   * Pages must live under a Subcategory.
   */
  subcategory: number | Subcategory;
  title: string;
  /**
   * Lowercase URL slug (auto-generated from title; you can edit).
   */
  slug: string;
  status?: ('draft' | 'published') | null;
  /**
   * Required when publishing.
   */
  publishedAt?: string | null;
  /**
   * If true, appears in subcategory menus (if public/allowed).
   */
  showInNav?: boolean | null;
  order?: number | null;
  hero?: {
    heading?: string | null;
    subheading?: string | null;
    image?: (number | null) | Media;
  };
  content?:
    | (
        | {
            image: number | Media;
            /**
             * Describe the image for accessibility (alt text).
             */
            alt: string;
            caption?: string | null;
            id?: string | null;
            blockName?: string | null;
            blockType: 'imageWithCaption';
          }
        | {
            title: string;
            body: {
              root: {
                type: string;
                children: {
                  type: string;
                  version: number;
                  [k: string]: unknown;
                }[];
                direction: ('ltr' | 'rtl') | null;
                format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
                indent: number;
                version: number;
              };
              [k: string]: unknown;
            };
            id?: string | null;
            blockName?: string | null;
            blockType: 'callout';
          }
        | {
            /**
             * Rendered in a row.
             */
            buttons: {
              label: string;
              /**
               * Internal path like /learn/... or full URL https://...
               */
              href: string;
              isExternal?: boolean | null;
              id?: string | null;
            }[];
            id?: string | null;
            blockName?: string | null;
            blockType: 'buttonRow';
          }
      )[]
    | null;
  /**
   * Per-page SEO & social metadata.
   */
  seo?: {
    metaTitle?: string | null;
    metaDescription?: string | null;
    /**
     * Optional canonical URL. Include scheme (https://...).
     */
    canonical?: string | null;
    ogImage?: (number | null) | Media;
  };
  /**
   * Read/Write gating. Inherit uses parent (subcategory/category) defaults.
   */
  visibility?: {
    mode?: ('inherit' | 'override') | null;
    read?: {
      policy?: ('public' | 'rank_at_least') | null;
      /**
       * Lowest Discord rank that can read. Higher ranks inherit access.
       */
      minRank?: number | null;
      /**
       * Explicit allow-list of Discord roles (optional).
       */
      allowRoleIds?: (number | DiscordRole)[] | null;
      /**
       * If user is not authorized, hide this from menus (recommended).
       */
      hideInMenus?: boolean | null;
    };
    write?: {
      policy?: ('editor_roles_only' | 'rank_at_least') | null;
      minRank?: number | null;
    };
  };
  updatedAt: string;
  createdAt: string;
  _status?: ('draft' | 'published') | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "tutorials".
 */
export interface Tutorial {
  id: number;
  category: number | Category;
  subcategory: number | Subcategory;
  title: string;
  /**
   * Lowercase URL slug (auto-generated from title; you can edit).
   */
  slug: string;
  status?: ('draft' | 'published') | null;
  publishedAt?: string | null;
  /**
   * Short summary (160-240 chars recommended).
   */
  excerpt?: string | null;
  coverImage?: (number | null) | Media;
  body: {
    root: {
      type: string;
      children: {
        type: string;
        version: number;
        [k: string]: unknown;
      }[];
      direction: ('ltr' | 'rtl') | null;
      format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
      indent: number;
      version: number;
    };
    [k: string]: unknown;
  };
  difficulty?: ('beginner' | 'intermediate' | 'advanced') | null;
  durationMinutes?: number | null;
  tags?: string[] | null;
  prerequisites?: (number | Tutorial)[] | null;
  series?: (number | null) | Series;
  video?: {
    youtubeId?: string | null;
    startSeconds?: number | null;
  };
  showInNav?: boolean | null;
  order?: number | null;
  /**
   * Per-page SEO & social metadata.
   */
  seo?: {
    metaTitle?: string | null;
    metaDescription?: string | null;
    /**
     * Optional canonical URL. Include scheme (https://...).
     */
    canonical?: string | null;
    ogImage?: (number | null) | Media;
  };
  /**
   * Read/Write gating. Inherit uses parent (subcategory/category) defaults.
   */
  visibility?: {
    mode?: ('inherit' | 'override') | null;
    read?: {
      policy?: ('public' | 'rank_at_least') | null;
      /**
       * Lowest Discord rank that can read. Higher ranks inherit access.
       */
      minRank?: number | null;
      /**
       * Explicit allow-list of Discord roles (optional).
       */
      allowRoleIds?: (number | DiscordRole)[] | null;
      /**
       * If user is not authorized, hide this from menus (recommended).
       */
      hideInMenus?: boolean | null;
    };
    write?: {
      policy?: ('editor_roles_only' | 'rank_at_least') | null;
      minRank?: number | null;
    };
  };
  updatedAt: string;
  createdAt: string;
  _status?: ('draft' | 'published') | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-locked-documents".
 */
export interface PayloadLockedDocument {
  id: number;
  document?:
    | ({
        relationTo: 'users';
        value: number | User;
      } | null)
    | ({
        relationTo: 'media';
        value: number | Media;
      } | null)
    | ({
        relationTo: 'discordRoles';
        value: number | DiscordRole;
      } | null)
    | ({
        relationTo: 'categories';
        value: number | Category;
      } | null)
    | ({
        relationTo: 'subcategories';
        value: number | Subcategory;
      } | null)
    | ({
        relationTo: 'series';
        value: number | Series;
      } | null)
    | ({
        relationTo: 'pages';
        value: number | Page;
      } | null)
    | ({
        relationTo: 'tutorials';
        value: number | Tutorial;
      } | null);
  globalSlug?: string | null;
  user: {
    relationTo: 'users';
    value: number | User;
  };
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-preferences".
 */
export interface PayloadPreference {
  id: number;
  user: {
    relationTo: 'users';
    value: number | User;
  };
  key?: string | null;
  value?:
    | {
        [k: string]: unknown;
      }
    | unknown[]
    | string
    | number
    | boolean
    | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-migrations".
 */
export interface PayloadMigration {
  id: number;
  name?: string | null;
  batch?: number | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "users_select".
 */
export interface UsersSelect<T extends boolean = true> {
  updatedAt?: T;
  createdAt?: T;
  email?: T;
  resetPasswordToken?: T;
  resetPasswordExpiration?: T;
  salt?: T;
  hash?: T;
  loginAttempts?: T;
  lockUntil?: T;
  sessions?:
    | T
    | {
        id?: T;
        createdAt?: T;
        expiresAt?: T;
      };
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "media_select".
 */
export interface MediaSelect<T extends boolean = true> {
  alt?: T;
  credit?: T;
  updatedAt?: T;
  createdAt?: T;
  url?: T;
  thumbnailURL?: T;
  filename?: T;
  mimeType?: T;
  filesize?: T;
  width?: T;
  height?: T;
  focalX?: T;
  focalY?: T;
  sizes?:
    | T
    | {
        thumb?:
          | T
          | {
              url?: T;
              width?: T;
              height?: T;
              mimeType?: T;
              filesize?: T;
              filename?: T;
            };
        medium?:
          | T
          | {
              url?: T;
              width?: T;
              height?: T;
              mimeType?: T;
              filesize?: T;
              filename?: T;
            };
        large?:
          | T
          | {
              url?: T;
              width?: T;
              height?: T;
              mimeType?: T;
              filesize?: T;
              filename?: T;
            };
      };
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "discordRoles_select".
 */
export interface DiscordRolesSelect<T extends boolean = true> {
  name?: T;
  roleId?: T;
  rank?: T;
  canEdit?: T;
  editorScopes?:
    | T
    | {
        categories?: T;
        subcategories?: T;
      };
  slug?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "categories_select".
 */
export interface CategoriesSelect<T extends boolean = true> {
  title?: T;
  slug?: T;
  order?: T;
  navHidden?: T;
  defaultVisibility?:
    | T
    | {
        readPolicy?: T;
        minReadRank?: T;
        allowRoleIds?: T;
        hideInMenus?: T;
        writePolicy?: T;
        minWriteRank?: T;
      };
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "subcategories_select".
 */
export interface SubcategoriesSelect<T extends boolean = true> {
  category?: T;
  title?: T;
  slug?: T;
  order?: T;
  navHidden?: T;
  defaultVisibility?:
    | T
    | {
        readPolicy?: T;
        minReadRank?: T;
        allowRoleIds?: T;
        hideInMenus?: T;
        writePolicy?: T;
        minWriteRank?: T;
      };
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "series_select".
 */
export interface SeriesSelect<T extends boolean = true> {
  title?: T;
  slug?: T;
  description?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "pages_select".
 */
export interface PagesSelect<T extends boolean = true> {
  category?: T;
  subcategory?: T;
  title?: T;
  slug?: T;
  status?: T;
  publishedAt?: T;
  showInNav?: T;
  order?: T;
  hero?:
    | T
    | {
        heading?: T;
        subheading?: T;
        image?: T;
      };
  content?:
    | T
    | {
        imageWithCaption?:
          | T
          | {
              image?: T;
              alt?: T;
              caption?: T;
              id?: T;
              blockName?: T;
            };
        callout?:
          | T
          | {
              title?: T;
              body?: T;
              id?: T;
              blockName?: T;
            };
        buttonRow?:
          | T
          | {
              buttons?:
                | T
                | {
                    label?: T;
                    href?: T;
                    isExternal?: T;
                    id?: T;
                  };
              id?: T;
              blockName?: T;
            };
      };
  seo?:
    | T
    | {
        metaTitle?: T;
        metaDescription?: T;
        canonical?: T;
        ogImage?: T;
      };
  visibility?:
    | T
    | {
        mode?: T;
        read?:
          | T
          | {
              policy?: T;
              minRank?: T;
              allowRoleIds?: T;
              hideInMenus?: T;
            };
        write?:
          | T
          | {
              policy?: T;
              minRank?: T;
            };
      };
  updatedAt?: T;
  createdAt?: T;
  _status?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "tutorials_select".
 */
export interface TutorialsSelect<T extends boolean = true> {
  category?: T;
  subcategory?: T;
  title?: T;
  slug?: T;
  status?: T;
  publishedAt?: T;
  excerpt?: T;
  coverImage?: T;
  body?: T;
  difficulty?: T;
  durationMinutes?: T;
  tags?: T;
  prerequisites?: T;
  series?: T;
  video?:
    | T
    | {
        youtubeId?: T;
        startSeconds?: T;
      };
  showInNav?: T;
  order?: T;
  seo?:
    | T
    | {
        metaTitle?: T;
        metaDescription?: T;
        canonical?: T;
        ogImage?: T;
      };
  visibility?:
    | T
    | {
        mode?: T;
        read?:
          | T
          | {
              policy?: T;
              minRank?: T;
              allowRoleIds?: T;
              hideInMenus?: T;
            };
        write?:
          | T
          | {
              policy?: T;
              minRank?: T;
            };
      };
  updatedAt?: T;
  createdAt?: T;
  _status?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-locked-documents_select".
 */
export interface PayloadLockedDocumentsSelect<T extends boolean = true> {
  document?: T;
  globalSlug?: T;
  user?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-preferences_select".
 */
export interface PayloadPreferencesSelect<T extends boolean = true> {
  user?: T;
  key?: T;
  value?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-migrations_select".
 */
export interface PayloadMigrationsSelect<T extends boolean = true> {
  name?: T;
  batch?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "nav".
 */
export interface Nav {
  id: number;
  /**
   * Top-level menu order & visibility.
   */
  categories?:
    | {
        category: number | Category;
        hidden?: boolean | null;
        id?: string | null;
      }[]
    | null;
  updatedAt?: string | null;
  createdAt?: string | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "footer".
 */
export interface Footer {
  id: number;
  columns?:
    | {
        title?: string | null;
        links?:
          | {
              label: string;
              /**
               * Internal path (/...) or full URL (https://...)
               */
              href: string;
              isExternal?: boolean | null;
              id?: string | null;
            }[]
          | null;
        id?: string | null;
      }[]
    | null;
  social?:
    | {
        network?: ('discord' | 'twitter' | 'youtube' | 'github' | 'website' | 'other') | null;
        href: string;
        id?: string | null;
      }[]
    | null;
  /**
   * Footer note or legal text.
   */
  note?: string | null;
  updatedAt?: string | null;
  createdAt?: string | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "nav_select".
 */
export interface NavSelect<T extends boolean = true> {
  categories?:
    | T
    | {
        category?: T;
        hidden?: T;
        id?: T;
      };
  updatedAt?: T;
  createdAt?: T;
  globalType?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "footer_select".
 */
export interface FooterSelect<T extends boolean = true> {
  columns?:
    | T
    | {
        title?: T;
        links?:
          | T
          | {
              label?: T;
              href?: T;
              isExternal?: T;
              id?: T;
            };
        id?: T;
      };
  social?:
    | T
    | {
        network?: T;
        href?: T;
        id?: T;
      };
  note?: T;
  updatedAt?: T;
  createdAt?: T;
  globalType?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "auth".
 */
export interface Auth {
  [k: string]: unknown;
}


declare module 'payload' {
  export interface GeneratedTypes extends Config {}
}