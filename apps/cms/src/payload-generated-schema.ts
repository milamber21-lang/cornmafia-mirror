/* tslint:disable */
/* eslint-disable */
/**
 * This file was automatically generated by Payload.
 * DO NOT MODIFY IT BY HAND. Instead, modify your source Payload config,
 * and re-run `payload generate:db-schema` to regenerate this file.
 */

import type {} from '@payloadcms/db-postgres'
import {
  pgTable,
  index,
  uniqueIndex,
  foreignKey,
  integer,
  varchar,
  timestamp,
  serial,
  boolean,
  numeric,
  text,
  jsonb,
  pgEnum,
} from '@payloadcms/db-postgres/drizzle/pg-core'
import { sql, relations } from '@payloadcms/db-postgres/drizzle'
export const enum_discord_roles_source = pgEnum('enum_discord_roles_source', ['discord', 'virtual'])
export const enum_categories_read_policy = pgEnum('enum_categories_read_policy', [
  'public',
  'rank_at_least',
])
export const enum_subcategories_read_policy = pgEnum('enum_subcategories_read_policy', [
  'public',
  'rank_at_least',
])
export const enum_templates_allowed_blocks = pgEnum('enum_templates_allowed_blocks', [
  'richText',
  'image',
  'imageWithCaption',
  'gallery',
  'mediaText',
  'videoEmbed',
  'cta',
])
export const enum_templates_blocks_media_text_media_position = pgEnum(
  'enum_templates_blocks_media_text_media_position',
  ['left', 'right'],
)
export const enum_pages_blocks_media_text_media_position = pgEnum(
  'enum_pages_blocks_media_text_media_position',
  ['left', 'right'],
)
export const enum_footer_social_network = pgEnum('enum_footer_social_network', [
  'discord',
  'twitter',
  'youtube',
  'github',
  'website',
  'other',
])

export const users_sessions = pgTable(
  'users_sessions',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    id: varchar('id').primaryKey(),
    createdAt: timestamp('created_at', { mode: 'string', withTimezone: true, precision: 3 }),
    expiresAt: timestamp('expires_at', {
      mode: 'string',
      withTimezone: true,
      precision: 3,
    }).notNull(),
  },
  (columns) => ({
    _orderIdx: index('users_sessions_order_idx').on(columns._order),
    _parentIDIdx: index('users_sessions_parent_id_idx').on(columns._parentID),
    _parentIDFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [users.id],
      name: 'users_sessions_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const users = pgTable(
  'users',
  {
    id: serial('id').primaryKey(),
    isAdmin: boolean('is_admin').default(false),
    updatedAt: timestamp('updated_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    createdAt: timestamp('created_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    email: varchar('email'),
    username: varchar('username').notNull(),
    resetPasswordToken: varchar('reset_password_token'),
    resetPasswordExpiration: timestamp('reset_password_expiration', {
      mode: 'string',
      withTimezone: true,
      precision: 3,
    }),
    salt: varchar('salt'),
    hash: varchar('hash'),
    loginAttempts: numeric('login_attempts').default('0'),
    lockUntil: timestamp('lock_until', { mode: 'string', withTimezone: true, precision: 3 }),
  },
  (columns) => ({
    users_updated_at_idx: index('users_updated_at_idx').on(columns.updatedAt),
    users_created_at_idx: index('users_created_at_idx').on(columns.createdAt),
    users_username_idx: uniqueIndex('users_username_idx').on(columns.username),
  }),
)

export const media = pgTable(
  'media',
  {
    id: serial('id').primaryKey(),
    alt: varchar('alt').notNull(),
    credit: varchar('credit'),
    minRank: numeric('min_rank').default('0'),
    updatedAt: timestamp('updated_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    createdAt: timestamp('created_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    url: varchar('url'),
    thumbnailURL: varchar('thumbnail_u_r_l'),
    filename: varchar('filename'),
    mimeType: varchar('mime_type'),
    filesize: numeric('filesize'),
    width: numeric('width'),
    height: numeric('height'),
    focalX: numeric('focal_x'),
    focalY: numeric('focal_y'),
    sizes_thumb_url: varchar('sizes_thumb_url'),
    sizes_thumb_width: numeric('sizes_thumb_width'),
    sizes_thumb_height: numeric('sizes_thumb_height'),
    sizes_thumb_mimeType: varchar('sizes_thumb_mime_type'),
    sizes_thumb_filesize: numeric('sizes_thumb_filesize'),
    sizes_thumb_filename: varchar('sizes_thumb_filename'),
    sizes_medium_url: varchar('sizes_medium_url'),
    sizes_medium_width: numeric('sizes_medium_width'),
    sizes_medium_height: numeric('sizes_medium_height'),
    sizes_medium_mimeType: varchar('sizes_medium_mime_type'),
    sizes_medium_filesize: numeric('sizes_medium_filesize'),
    sizes_medium_filename: varchar('sizes_medium_filename'),
    sizes_large_url: varchar('sizes_large_url'),
    sizes_large_width: numeric('sizes_large_width'),
    sizes_large_height: numeric('sizes_large_height'),
    sizes_large_mimeType: varchar('sizes_large_mime_type'),
    sizes_large_filesize: numeric('sizes_large_filesize'),
    sizes_large_filename: varchar('sizes_large_filename'),
  },
  (columns) => ({
    media_updated_at_idx: index('media_updated_at_idx').on(columns.updatedAt),
    media_created_at_idx: index('media_created_at_idx').on(columns.createdAt),
    media_filename_idx: uniqueIndex('media_filename_idx').on(columns.filename),
    media_sizes_thumb_sizes_thumb_filename_idx: index(
      'media_sizes_thumb_sizes_thumb_filename_idx',
    ).on(columns.sizes_thumb_filename),
    media_sizes_medium_sizes_medium_filename_idx: index(
      'media_sizes_medium_sizes_medium_filename_idx',
    ).on(columns.sizes_medium_filename),
    media_sizes_large_sizes_large_filename_idx: index(
      'media_sizes_large_sizes_large_filename_idx',
    ).on(columns.sizes_large_filename),
  }),
)

export const discord_roles = pgTable(
  'discord_roles',
  {
    id: serial('id').primaryKey(),
    name: varchar('name').notNull(),
    source: enum_discord_roles_source('source').notNull().default('discord'),
    roleId: varchar('role_id'),
    colorHex: varchar('color_hex'),
    rank: numeric('rank').notNull().default('0'),
    fullEditorialAccess: boolean('full_editorial_access').default(false),
    cmsAdmin: boolean('cms_admin').default(false),
    isPublicDefault: boolean('is_public_default').default(false),
    isAuthenticatedDefault: boolean('is_authenticated_default').default(false),
    slug: varchar('slug'),
    updatedAt: timestamp('updated_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    createdAt: timestamp('created_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
  },
  (columns) => ({
    discord_roles_role_id_idx: uniqueIndex('discord_roles_role_id_idx').on(columns.roleId),
    discord_roles_slug_idx: uniqueIndex('discord_roles_slug_idx').on(columns.slug),
    discord_roles_updated_at_idx: index('discord_roles_updated_at_idx').on(columns.updatedAt),
    discord_roles_created_at_idx: index('discord_roles_created_at_idx').on(columns.createdAt),
  }),
)

export const categories = pgTable(
  'categories',
  {
    id: serial('id').primaryKey(),
    title: varchar('title').notNull(),
    slug: varchar('slug').notNull(),
    navHidden: boolean('nav_hidden').default(false),
    readPolicy: enum_categories_read_policy('read_policy').default('public'),
    readMinRank: numeric('read_min_rank'),
    iconKey: integer('icon_key_id').references(() => icons.id, {
      onDelete: 'set null',
    }),
    iconColor: integer('icon_color_id').references(() => theme_tokens.id, {
      onDelete: 'set null',
    }),
    updatedAt: timestamp('updated_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    createdAt: timestamp('created_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
  },
  (columns) => ({
    categories_slug_idx: uniqueIndex('categories_slug_idx').on(columns.slug),
    categories_icon_key_idx: index('categories_icon_key_idx').on(columns.iconKey),
    categories_icon_color_idx: index('categories_icon_color_idx').on(columns.iconColor),
    categories_updated_at_idx: index('categories_updated_at_idx').on(columns.updatedAt),
    categories_created_at_idx: index('categories_created_at_idx').on(columns.createdAt),
  }),
)

export const categories_rels = pgTable(
  'categories_rels',
  {
    id: serial('id').primaryKey(),
    order: integer('order'),
    parent: integer('parent_id').notNull(),
    path: varchar('path').notNull(),
    discordRolesID: integer('discord_roles_id'),
    templatesID: integer('templates_id'),
  },
  (columns) => ({
    order: index('categories_rels_order_idx').on(columns.order),
    parentIdx: index('categories_rels_parent_idx').on(columns.parent),
    pathIdx: index('categories_rels_path_idx').on(columns.path),
    categories_rels_discord_roles_id_idx: index('categories_rels_discord_roles_id_idx').on(
      columns.discordRolesID,
    ),
    categories_rels_templates_id_idx: index('categories_rels_templates_id_idx').on(
      columns.templatesID,
    ),
    parentFk: foreignKey({
      columns: [columns['parent']],
      foreignColumns: [categories.id],
      name: 'categories_rels_parent_fk',
    }).onDelete('cascade'),
    discordRolesIdFk: foreignKey({
      columns: [columns['discordRolesID']],
      foreignColumns: [discord_roles.id],
      name: 'categories_rels_discord_roles_fk',
    }).onDelete('cascade'),
    templatesIdFk: foreignKey({
      columns: [columns['templatesID']],
      foreignColumns: [templates.id],
      name: 'categories_rels_templates_fk',
    }).onDelete('cascade'),
  }),
)

export const subcategories = pgTable(
  'subcategories',
  {
    id: serial('id').primaryKey(),
    category: integer('category_id')
      .notNull()
      .references(() => categories.id, {
        onDelete: 'set null',
      }),
    title: varchar('title').notNull(),
    slug: varchar('slug').notNull(),
    navHidden: boolean('nav_hidden').default(false),
    inheritAllowedTemplatesFromCategory: boolean('inherit_allowed_templates_from_category').default(
      true,
    ),
    readPolicy: enum_subcategories_read_policy('read_policy').default('public'),
    readMinRank: numeric('read_min_rank'),
    inheritWriteFromCategory: boolean('inherit_write_from_category').default(true),
    iconKey: integer('icon_key_id').references(() => icons.id, {
      onDelete: 'set null',
    }),
    iconColor: integer('icon_color_id').references(() => theme_tokens.id, {
      onDelete: 'set null',
    }),
    updatedAt: timestamp('updated_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    createdAt: timestamp('created_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
  },
  (columns) => ({
    subcategories_category_idx: index('subcategories_category_idx').on(columns.category),
    subcategories_slug_idx: uniqueIndex('subcategories_slug_idx').on(columns.slug),
    subcategories_icon_key_idx: index('subcategories_icon_key_idx').on(columns.iconKey),
    subcategories_icon_color_idx: index('subcategories_icon_color_idx').on(columns.iconColor),
    subcategories_updated_at_idx: index('subcategories_updated_at_idx').on(columns.updatedAt),
    subcategories_created_at_idx: index('subcategories_created_at_idx').on(columns.createdAt),
  }),
)

export const subcategories_rels = pgTable(
  'subcategories_rels',
  {
    id: serial('id').primaryKey(),
    order: integer('order'),
    parent: integer('parent_id').notNull(),
    path: varchar('path').notNull(),
    templatesID: integer('templates_id'),
    discordRolesID: integer('discord_roles_id'),
  },
  (columns) => ({
    order: index('subcategories_rels_order_idx').on(columns.order),
    parentIdx: index('subcategories_rels_parent_idx').on(columns.parent),
    pathIdx: index('subcategories_rels_path_idx').on(columns.path),
    subcategories_rels_templates_id_idx: index('subcategories_rels_templates_id_idx').on(
      columns.templatesID,
    ),
    subcategories_rels_discord_roles_id_idx: index('subcategories_rels_discord_roles_id_idx').on(
      columns.discordRolesID,
    ),
    parentFk: foreignKey({
      columns: [columns['parent']],
      foreignColumns: [subcategories.id],
      name: 'subcategories_rels_parent_fk',
    }).onDelete('cascade'),
    templatesIdFk: foreignKey({
      columns: [columns['templatesID']],
      foreignColumns: [templates.id],
      name: 'subcategories_rels_templates_fk',
    }).onDelete('cascade'),
    discordRolesIdFk: foreignKey({
      columns: [columns['discordRolesID']],
      foreignColumns: [discord_roles.id],
      name: 'subcategories_rels_discord_roles_fk',
    }).onDelete('cascade'),
  }),
)

export const series = pgTable(
  'series',
  {
    id: serial('id').primaryKey(),
    title: varchar('title').notNull(),
    slug: varchar('slug').notNull(),
    description: varchar('description'),
    minRank: numeric('min_rank').default('0'),
    updatedAt: timestamp('updated_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    createdAt: timestamp('created_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
  },
  (columns) => ({
    series_slug_idx: uniqueIndex('series_slug_idx').on(columns.slug),
    series_updated_at_idx: index('series_updated_at_idx').on(columns.updatedAt),
    series_created_at_idx: index('series_created_at_idx').on(columns.createdAt),
  }),
)

export const templates_allowed_blocks = pgTable(
  'templates_allowed_blocks',
  {
    order: integer('order').notNull(),
    parent: integer('parent_id').notNull(),
    value: enum_templates_allowed_blocks('value'),
    id: serial('id').primaryKey(),
  },
  (columns) => ({
    orderIdx: index('templates_allowed_blocks_order_idx').on(columns.order),
    parentIdx: index('templates_allowed_blocks_parent_idx').on(columns.parent),
    parentFk: foreignKey({
      columns: [columns['parent']],
      foreignColumns: [templates.id],
      name: 'templates_allowed_blocks_parent_fk',
    }).onDelete('cascade'),
  }),
)

export const templates_blocks_rich_text = pgTable(
  'templates_blocks_rich_text',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    _path: text('_path').notNull(),
    id: varchar('id').primaryKey(),
    content: jsonb('content'),
    blockName: varchar('block_name'),
  },
  (columns) => ({
    _orderIdx: index('templates_blocks_rich_text_order_idx').on(columns._order),
    _parentIDIdx: index('templates_blocks_rich_text_parent_id_idx').on(columns._parentID),
    _pathIdx: index('templates_blocks_rich_text_path_idx').on(columns._path),
    _parentIdFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [templates.id],
      name: 'templates_blocks_rich_text_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const templates_blocks_image = pgTable(
  'templates_blocks_image',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    _path: text('_path').notNull(),
    id: varchar('id').primaryKey(),
    media: integer('media_id')
      .notNull()
      .references(() => media.id, {
        onDelete: 'set null',
      }),
    alt: varchar('alt'),
    blockName: varchar('block_name'),
  },
  (columns) => ({
    _orderIdx: index('templates_blocks_image_order_idx').on(columns._order),
    _parentIDIdx: index('templates_blocks_image_parent_id_idx').on(columns._parentID),
    _pathIdx: index('templates_blocks_image_path_idx').on(columns._path),
    templates_blocks_image_media_idx: index('templates_blocks_image_media_idx').on(columns.media),
    _parentIdFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [templates.id],
      name: 'templates_blocks_image_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const templates_blocks_image_with_caption = pgTable(
  'templates_blocks_image_with_caption',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    _path: text('_path').notNull(),
    id: varchar('id').primaryKey(),
    media: integer('media_id')
      .notNull()
      .references(() => media.id, {
        onDelete: 'set null',
      }),
    alt: varchar('alt'),
    caption: jsonb('caption'),
    blockName: varchar('block_name'),
  },
  (columns) => ({
    _orderIdx: index('templates_blocks_image_with_caption_order_idx').on(columns._order),
    _parentIDIdx: index('templates_blocks_image_with_caption_parent_id_idx').on(columns._parentID),
    _pathIdx: index('templates_blocks_image_with_caption_path_idx').on(columns._path),
    templates_blocks_image_with_caption_media_idx: index(
      'templates_blocks_image_with_caption_media_idx',
    ).on(columns.media),
    _parentIdFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [templates.id],
      name: 'templates_blocks_image_with_caption_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const templates_blocks_gallery_items = pgTable(
  'templates_blocks_gallery_items',
  {
    _order: integer('_order').notNull(),
    _parentID: varchar('_parent_id').notNull(),
    id: varchar('id').primaryKey(),
    media: integer('media_id')
      .notNull()
      .references(() => media.id, {
        onDelete: 'set null',
      }),
    alt: varchar('alt'),
  },
  (columns) => ({
    _orderIdx: index('templates_blocks_gallery_items_order_idx').on(columns._order),
    _parentIDIdx: index('templates_blocks_gallery_items_parent_id_idx').on(columns._parentID),
    templates_blocks_gallery_items_media_idx: index('templates_blocks_gallery_items_media_idx').on(
      columns.media,
    ),
    _parentIDFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [templates_blocks_gallery.id],
      name: 'templates_blocks_gallery_items_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const templates_blocks_gallery = pgTable(
  'templates_blocks_gallery',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    _path: text('_path').notNull(),
    id: varchar('id').primaryKey(),
    blockName: varchar('block_name'),
  },
  (columns) => ({
    _orderIdx: index('templates_blocks_gallery_order_idx').on(columns._order),
    _parentIDIdx: index('templates_blocks_gallery_parent_id_idx').on(columns._parentID),
    _pathIdx: index('templates_blocks_gallery_path_idx').on(columns._path),
    _parentIdFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [templates.id],
      name: 'templates_blocks_gallery_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const templates_blocks_media_text = pgTable(
  'templates_blocks_media_text',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    _path: text('_path').notNull(),
    id: varchar('id').primaryKey(),
    media: integer('media_id')
      .notNull()
      .references(() => media.id, {
        onDelete: 'set null',
      }),
    mediaPosition:
      enum_templates_blocks_media_text_media_position('media_position').default('right'),
    mediaWidth: numeric('media_width').default('40'),
    content: jsonb('content'),
    blockName: varchar('block_name'),
  },
  (columns) => ({
    _orderIdx: index('templates_blocks_media_text_order_idx').on(columns._order),
    _parentIDIdx: index('templates_blocks_media_text_parent_id_idx').on(columns._parentID),
    _pathIdx: index('templates_blocks_media_text_path_idx').on(columns._path),
    templates_blocks_media_text_media_idx: index('templates_blocks_media_text_media_idx').on(
      columns.media,
    ),
    _parentIdFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [templates.id],
      name: 'templates_blocks_media_text_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const templates_blocks_video_embed = pgTable(
  'templates_blocks_video_embed',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    _path: text('_path').notNull(),
    id: varchar('id').primaryKey(),
    title: varchar('title'),
    url: varchar('url').notNull(),
    blockName: varchar('block_name'),
  },
  (columns) => ({
    _orderIdx: index('templates_blocks_video_embed_order_idx').on(columns._order),
    _parentIDIdx: index('templates_blocks_video_embed_parent_id_idx').on(columns._parentID),
    _pathIdx: index('templates_blocks_video_embed_path_idx').on(columns._path),
    _parentIdFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [templates.id],
      name: 'templates_blocks_video_embed_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const templates_blocks_cta = pgTable(
  'templates_blocks_cta',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    _path: text('_path').notNull(),
    id: varchar('id').primaryKey(),
    label: varchar('label').notNull(),
    href: varchar('href').notNull(),
    newTab: boolean('new_tab').default(false),
    blockName: varchar('block_name'),
  },
  (columns) => ({
    _orderIdx: index('templates_blocks_cta_order_idx').on(columns._order),
    _parentIDIdx: index('templates_blocks_cta_parent_id_idx').on(columns._parentID),
    _pathIdx: index('templates_blocks_cta_path_idx').on(columns._path),
    _parentIdFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [templates.id],
      name: 'templates_blocks_cta_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const templates = pgTable(
  'templates',
  {
    id: serial('id').primaryKey(),
    key: varchar('key').notNull(),
    label: varchar('label').notNull(),
    defaultIconKey: integer('default_icon_key_id').references(() => icons.id, {
      onDelete: 'set null',
    }),
    defaultColorToken: integer('default_color_token_id').references(() => theme_tokens.id, {
      onDelete: 'set null',
    }),
    updatedAt: timestamp('updated_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    createdAt: timestamp('created_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
  },
  (columns) => ({
    templates_key_idx: uniqueIndex('templates_key_idx').on(columns.key),
    templates_default_icon_key_idx: index('templates_default_icon_key_idx').on(
      columns.defaultIconKey,
    ),
    templates_default_color_token_idx: index('templates_default_color_token_idx').on(
      columns.defaultColorToken,
    ),
    templates_updated_at_idx: index('templates_updated_at_idx').on(columns.updatedAt),
    templates_created_at_idx: index('templates_created_at_idx').on(columns.createdAt),
  }),
)

export const pages_blocks_rich_text = pgTable(
  'pages_blocks_rich_text',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    _path: text('_path').notNull(),
    id: varchar('id').primaryKey(),
    content: jsonb('content'),
    blockName: varchar('block_name'),
  },
  (columns) => ({
    _orderIdx: index('pages_blocks_rich_text_order_idx').on(columns._order),
    _parentIDIdx: index('pages_blocks_rich_text_parent_id_idx').on(columns._parentID),
    _pathIdx: index('pages_blocks_rich_text_path_idx').on(columns._path),
    _parentIdFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [pages.id],
      name: 'pages_blocks_rich_text_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const pages_blocks_image = pgTable(
  'pages_blocks_image',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    _path: text('_path').notNull(),
    id: varchar('id').primaryKey(),
    media: integer('media_id')
      .notNull()
      .references(() => media.id, {
        onDelete: 'set null',
      }),
    alt: varchar('alt'),
    blockName: varchar('block_name'),
  },
  (columns) => ({
    _orderIdx: index('pages_blocks_image_order_idx').on(columns._order),
    _parentIDIdx: index('pages_blocks_image_parent_id_idx').on(columns._parentID),
    _pathIdx: index('pages_blocks_image_path_idx').on(columns._path),
    pages_blocks_image_media_idx: index('pages_blocks_image_media_idx').on(columns.media),
    _parentIdFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [pages.id],
      name: 'pages_blocks_image_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const pages_blocks_image_with_caption = pgTable(
  'pages_blocks_image_with_caption',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    _path: text('_path').notNull(),
    id: varchar('id').primaryKey(),
    media: integer('media_id')
      .notNull()
      .references(() => media.id, {
        onDelete: 'set null',
      }),
    alt: varchar('alt'),
    caption: jsonb('caption'),
    blockName: varchar('block_name'),
  },
  (columns) => ({
    _orderIdx: index('pages_blocks_image_with_caption_order_idx').on(columns._order),
    _parentIDIdx: index('pages_blocks_image_with_caption_parent_id_idx').on(columns._parentID),
    _pathIdx: index('pages_blocks_image_with_caption_path_idx').on(columns._path),
    pages_blocks_image_with_caption_media_idx: index(
      'pages_blocks_image_with_caption_media_idx',
    ).on(columns.media),
    _parentIdFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [pages.id],
      name: 'pages_blocks_image_with_caption_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const pages_blocks_gallery_items = pgTable(
  'pages_blocks_gallery_items',
  {
    _order: integer('_order').notNull(),
    _parentID: varchar('_parent_id').notNull(),
    id: varchar('id').primaryKey(),
    media: integer('media_id')
      .notNull()
      .references(() => media.id, {
        onDelete: 'set null',
      }),
    alt: varchar('alt'),
  },
  (columns) => ({
    _orderIdx: index('pages_blocks_gallery_items_order_idx').on(columns._order),
    _parentIDIdx: index('pages_blocks_gallery_items_parent_id_idx').on(columns._parentID),
    pages_blocks_gallery_items_media_idx: index('pages_blocks_gallery_items_media_idx').on(
      columns.media,
    ),
    _parentIDFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [pages_blocks_gallery.id],
      name: 'pages_blocks_gallery_items_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const pages_blocks_gallery = pgTable(
  'pages_blocks_gallery',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    _path: text('_path').notNull(),
    id: varchar('id').primaryKey(),
    blockName: varchar('block_name'),
  },
  (columns) => ({
    _orderIdx: index('pages_blocks_gallery_order_idx').on(columns._order),
    _parentIDIdx: index('pages_blocks_gallery_parent_id_idx').on(columns._parentID),
    _pathIdx: index('pages_blocks_gallery_path_idx').on(columns._path),
    _parentIdFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [pages.id],
      name: 'pages_blocks_gallery_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const pages_blocks_media_text = pgTable(
  'pages_blocks_media_text',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    _path: text('_path').notNull(),
    id: varchar('id').primaryKey(),
    media: integer('media_id')
      .notNull()
      .references(() => media.id, {
        onDelete: 'set null',
      }),
    mediaPosition: enum_pages_blocks_media_text_media_position('media_position').default('right'),
    mediaWidth: numeric('media_width').default('40'),
    content: jsonb('content'),
    blockName: varchar('block_name'),
  },
  (columns) => ({
    _orderIdx: index('pages_blocks_media_text_order_idx').on(columns._order),
    _parentIDIdx: index('pages_blocks_media_text_parent_id_idx').on(columns._parentID),
    _pathIdx: index('pages_blocks_media_text_path_idx').on(columns._path),
    pages_blocks_media_text_media_idx: index('pages_blocks_media_text_media_idx').on(columns.media),
    _parentIdFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [pages.id],
      name: 'pages_blocks_media_text_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const pages_blocks_video_embed = pgTable(
  'pages_blocks_video_embed',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    _path: text('_path').notNull(),
    id: varchar('id').primaryKey(),
    title: varchar('title'),
    url: varchar('url').notNull(),
    blockName: varchar('block_name'),
  },
  (columns) => ({
    _orderIdx: index('pages_blocks_video_embed_order_idx').on(columns._order),
    _parentIDIdx: index('pages_blocks_video_embed_parent_id_idx').on(columns._parentID),
    _pathIdx: index('pages_blocks_video_embed_path_idx').on(columns._path),
    _parentIdFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [pages.id],
      name: 'pages_blocks_video_embed_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const pages_blocks_cta = pgTable(
  'pages_blocks_cta',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    _path: text('_path').notNull(),
    id: varchar('id').primaryKey(),
    label: varchar('label').notNull(),
    href: varchar('href').notNull(),
    newTab: boolean('new_tab').default(false),
    blockName: varchar('block_name'),
  },
  (columns) => ({
    _orderIdx: index('pages_blocks_cta_order_idx').on(columns._order),
    _parentIDIdx: index('pages_blocks_cta_parent_id_idx').on(columns._parentID),
    _pathIdx: index('pages_blocks_cta_path_idx').on(columns._path),
    _parentIdFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [pages.id],
      name: 'pages_blocks_cta_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const pages = pgTable(
  'pages',
  {
    id: serial('id').primaryKey(),
    title: varchar('title').notNull(),
    slug: varchar('slug').notNull(),
    subcategory: integer('subcategory_id')
      .notNull()
      .references(() => subcategories.id, {
        onDelete: 'set null',
      }),
    series: integer('series_id').references(() => series.id, {
      onDelete: 'set null',
    }),
    seriesPart: numeric('series_part'),
    template: integer('template_id')
      .notNull()
      .references(() => templates.id, {
        onDelete: 'set null',
      }),
    excerpt: varchar('excerpt'),
    minRank: numeric('min_rank').default('0'),
    iconKey: integer('icon_key_id').references(() => icons.id, {
      onDelete: 'set null',
    }),
    iconColor: integer('icon_color_id').references(() => theme_tokens.id, {
      onDelete: 'set null',
    }),
    createdByDiscordId: varchar('created_by_discord_id'),
    navHidden: boolean('nav_hidden').default(false),
    updatedAt: timestamp('updated_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    createdAt: timestamp('created_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
  },
  (columns) => ({
    pages_slug_idx: uniqueIndex('pages_slug_idx').on(columns.slug),
    pages_subcategory_idx: index('pages_subcategory_idx').on(columns.subcategory),
    pages_series_idx: index('pages_series_idx').on(columns.series),
    pages_template_idx: index('pages_template_idx').on(columns.template),
    pages_icon_key_idx: index('pages_icon_key_idx').on(columns.iconKey),
    pages_icon_color_idx: index('pages_icon_color_idx').on(columns.iconColor),
    pages_updated_at_idx: index('pages_updated_at_idx').on(columns.updatedAt),
    pages_created_at_idx: index('pages_created_at_idx').on(columns.createdAt),
  }),
)

export const icons = pgTable(
  'icons',
  {
    id: serial('id').primaryKey(),
    key: varchar('key').notNull(),
    label: varchar('label').notNull(),
    lucideName: varchar('lucide_name'),
    enabled: boolean('enabled').default(true),
    updatedAt: timestamp('updated_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    createdAt: timestamp('created_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
  },
  (columns) => ({
    icons_key_idx: uniqueIndex('icons_key_idx').on(columns.key),
    icons_updated_at_idx: index('icons_updated_at_idx').on(columns.updatedAt),
    icons_created_at_idx: index('icons_created_at_idx').on(columns.createdAt),
  }),
)

export const theme_tokens = pgTable(
  'theme_tokens',
  {
    id: serial('id').primaryKey(),
    key: varchar('key').notNull(),
    label: varchar('label').notNull(),
    preview: varchar('preview'),
    enabled: boolean('enabled').default(true),
    updatedAt: timestamp('updated_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    createdAt: timestamp('created_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
  },
  (columns) => ({
    theme_tokens_key_idx: uniqueIndex('theme_tokens_key_idx').on(columns.key),
    theme_tokens_updated_at_idx: index('theme_tokens_updated_at_idx').on(columns.updatedAt),
    theme_tokens_created_at_idx: index('theme_tokens_created_at_idx').on(columns.createdAt),
  }),
)

export const payload_locked_documents = pgTable(
  'payload_locked_documents',
  {
    id: serial('id').primaryKey(),
    globalSlug: varchar('global_slug'),
    updatedAt: timestamp('updated_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    createdAt: timestamp('created_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
  },
  (columns) => ({
    payload_locked_documents_global_slug_idx: index('payload_locked_documents_global_slug_idx').on(
      columns.globalSlug,
    ),
    payload_locked_documents_updated_at_idx: index('payload_locked_documents_updated_at_idx').on(
      columns.updatedAt,
    ),
    payload_locked_documents_created_at_idx: index('payload_locked_documents_created_at_idx').on(
      columns.createdAt,
    ),
  }),
)

export const payload_locked_documents_rels = pgTable(
  'payload_locked_documents_rels',
  {
    id: serial('id').primaryKey(),
    order: integer('order'),
    parent: integer('parent_id').notNull(),
    path: varchar('path').notNull(),
    usersID: integer('users_id'),
    mediaID: integer('media_id'),
    discordRolesID: integer('discord_roles_id'),
    categoriesID: integer('categories_id'),
    subcategoriesID: integer('subcategories_id'),
    seriesID: integer('series_id'),
    templatesID: integer('templates_id'),
    pagesID: integer('pages_id'),
    iconsID: integer('icons_id'),
    themeTokensID: integer('theme_tokens_id'),
  },
  (columns) => ({
    order: index('payload_locked_documents_rels_order_idx').on(columns.order),
    parentIdx: index('payload_locked_documents_rels_parent_idx').on(columns.parent),
    pathIdx: index('payload_locked_documents_rels_path_idx').on(columns.path),
    payload_locked_documents_rels_users_id_idx: index(
      'payload_locked_documents_rels_users_id_idx',
    ).on(columns.usersID),
    payload_locked_documents_rels_media_id_idx: index(
      'payload_locked_documents_rels_media_id_idx',
    ).on(columns.mediaID),
    payload_locked_documents_rels_discord_roles_id_idx: index(
      'payload_locked_documents_rels_discord_roles_id_idx',
    ).on(columns.discordRolesID),
    payload_locked_documents_rels_categories_id_idx: index(
      'payload_locked_documents_rels_categories_id_idx',
    ).on(columns.categoriesID),
    payload_locked_documents_rels_subcategories_id_idx: index(
      'payload_locked_documents_rels_subcategories_id_idx',
    ).on(columns.subcategoriesID),
    payload_locked_documents_rels_series_id_idx: index(
      'payload_locked_documents_rels_series_id_idx',
    ).on(columns.seriesID),
    payload_locked_documents_rels_templates_id_idx: index(
      'payload_locked_documents_rels_templates_id_idx',
    ).on(columns.templatesID),
    payload_locked_documents_rels_pages_id_idx: index(
      'payload_locked_documents_rels_pages_id_idx',
    ).on(columns.pagesID),
    payload_locked_documents_rels_icons_id_idx: index(
      'payload_locked_documents_rels_icons_id_idx',
    ).on(columns.iconsID),
    payload_locked_documents_rels_theme_tokens_id_idx: index(
      'payload_locked_documents_rels_theme_tokens_id_idx',
    ).on(columns.themeTokensID),
    parentFk: foreignKey({
      columns: [columns['parent']],
      foreignColumns: [payload_locked_documents.id],
      name: 'payload_locked_documents_rels_parent_fk',
    }).onDelete('cascade'),
    usersIdFk: foreignKey({
      columns: [columns['usersID']],
      foreignColumns: [users.id],
      name: 'payload_locked_documents_rels_users_fk',
    }).onDelete('cascade'),
    mediaIdFk: foreignKey({
      columns: [columns['mediaID']],
      foreignColumns: [media.id],
      name: 'payload_locked_documents_rels_media_fk',
    }).onDelete('cascade'),
    discordRolesIdFk: foreignKey({
      columns: [columns['discordRolesID']],
      foreignColumns: [discord_roles.id],
      name: 'payload_locked_documents_rels_discord_roles_fk',
    }).onDelete('cascade'),
    categoriesIdFk: foreignKey({
      columns: [columns['categoriesID']],
      foreignColumns: [categories.id],
      name: 'payload_locked_documents_rels_categories_fk',
    }).onDelete('cascade'),
    subcategoriesIdFk: foreignKey({
      columns: [columns['subcategoriesID']],
      foreignColumns: [subcategories.id],
      name: 'payload_locked_documents_rels_subcategories_fk',
    }).onDelete('cascade'),
    seriesIdFk: foreignKey({
      columns: [columns['seriesID']],
      foreignColumns: [series.id],
      name: 'payload_locked_documents_rels_series_fk',
    }).onDelete('cascade'),
    templatesIdFk: foreignKey({
      columns: [columns['templatesID']],
      foreignColumns: [templates.id],
      name: 'payload_locked_documents_rels_templates_fk',
    }).onDelete('cascade'),
    pagesIdFk: foreignKey({
      columns: [columns['pagesID']],
      foreignColumns: [pages.id],
      name: 'payload_locked_documents_rels_pages_fk',
    }).onDelete('cascade'),
    iconsIdFk: foreignKey({
      columns: [columns['iconsID']],
      foreignColumns: [icons.id],
      name: 'payload_locked_documents_rels_icons_fk',
    }).onDelete('cascade'),
    themeTokensIdFk: foreignKey({
      columns: [columns['themeTokensID']],
      foreignColumns: [theme_tokens.id],
      name: 'payload_locked_documents_rels_theme_tokens_fk',
    }).onDelete('cascade'),
  }),
)

export const payload_preferences = pgTable(
  'payload_preferences',
  {
    id: serial('id').primaryKey(),
    key: varchar('key'),
    value: jsonb('value'),
    updatedAt: timestamp('updated_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    createdAt: timestamp('created_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
  },
  (columns) => ({
    payload_preferences_key_idx: index('payload_preferences_key_idx').on(columns.key),
    payload_preferences_updated_at_idx: index('payload_preferences_updated_at_idx').on(
      columns.updatedAt,
    ),
    payload_preferences_created_at_idx: index('payload_preferences_created_at_idx').on(
      columns.createdAt,
    ),
  }),
)

export const payload_preferences_rels = pgTable(
  'payload_preferences_rels',
  {
    id: serial('id').primaryKey(),
    order: integer('order'),
    parent: integer('parent_id').notNull(),
    path: varchar('path').notNull(),
    usersID: integer('users_id'),
  },
  (columns) => ({
    order: index('payload_preferences_rels_order_idx').on(columns.order),
    parentIdx: index('payload_preferences_rels_parent_idx').on(columns.parent),
    pathIdx: index('payload_preferences_rels_path_idx').on(columns.path),
    payload_preferences_rels_users_id_idx: index('payload_preferences_rels_users_id_idx').on(
      columns.usersID,
    ),
    parentFk: foreignKey({
      columns: [columns['parent']],
      foreignColumns: [payload_preferences.id],
      name: 'payload_preferences_rels_parent_fk',
    }).onDelete('cascade'),
    usersIdFk: foreignKey({
      columns: [columns['usersID']],
      foreignColumns: [users.id],
      name: 'payload_preferences_rels_users_fk',
    }).onDelete('cascade'),
  }),
)

export const payload_migrations = pgTable(
  'payload_migrations',
  {
    id: serial('id').primaryKey(),
    name: varchar('name'),
    batch: numeric('batch'),
    updatedAt: timestamp('updated_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    createdAt: timestamp('created_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
  },
  (columns) => ({
    payload_migrations_updated_at_idx: index('payload_migrations_updated_at_idx').on(
      columns.updatedAt,
    ),
    payload_migrations_created_at_idx: index('payload_migrations_created_at_idx').on(
      columns.createdAt,
    ),
  }),
)

export const nav_items_subcategories_pages = pgTable(
  'nav_items_subcategories_pages',
  {
    _order: integer('_order').notNull(),
    _parentID: varchar('_parent_id').notNull(),
    id: varchar('id').primaryKey(),
    page: integer('page_id')
      .notNull()
      .references(() => pages.id, {
        onDelete: 'set null',
      }),
  },
  (columns) => ({
    _orderIdx: index('nav_items_subcategories_pages_order_idx').on(columns._order),
    _parentIDIdx: index('nav_items_subcategories_pages_parent_id_idx').on(columns._parentID),
    nav_items_subcategories_pages_page_idx: index('nav_items_subcategories_pages_page_idx').on(
      columns.page,
    ),
    _parentIDFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [nav_items_subcategories.id],
      name: 'nav_items_subcategories_pages_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const nav_items_subcategories = pgTable(
  'nav_items_subcategories',
  {
    _order: integer('_order').notNull(),
    _parentID: varchar('_parent_id').notNull(),
    id: varchar('id').primaryKey(),
    subcategory: integer('subcategory_id')
      .notNull()
      .references(() => subcategories.id, {
        onDelete: 'set null',
      }),
  },
  (columns) => ({
    _orderIdx: index('nav_items_subcategories_order_idx').on(columns._order),
    _parentIDIdx: index('nav_items_subcategories_parent_id_idx').on(columns._parentID),
    nav_items_subcategories_subcategory_idx: index('nav_items_subcategories_subcategory_idx').on(
      columns.subcategory,
    ),
    _parentIDFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [nav_items.id],
      name: 'nav_items_subcategories_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const nav_items = pgTable(
  'nav_items',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    id: varchar('id').primaryKey(),
    category: integer('category_id')
      .notNull()
      .references(() => categories.id, {
        onDelete: 'set null',
      }),
    iconKeyOverride: integer('icon_key_override_id').references(() => icons.id, {
      onDelete: 'set null',
    }),
    iconColorOverride: integer('icon_color_override_id').references(() => theme_tokens.id, {
      onDelete: 'set null',
    }),
  },
  (columns) => ({
    _orderIdx: index('nav_items_order_idx').on(columns._order),
    _parentIDIdx: index('nav_items_parent_id_idx').on(columns._parentID),
    nav_items_category_idx: index('nav_items_category_idx').on(columns.category),
    nav_items_icon_key_override_idx: index('nav_items_icon_key_override_idx').on(
      columns.iconKeyOverride,
    ),
    nav_items_icon_color_override_idx: index('nav_items_icon_color_override_idx').on(
      columns.iconColorOverride,
    ),
    _parentIDFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [nav.id],
      name: 'nav_items_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const nav = pgTable('nav', {
  id: serial('id').primaryKey(),
  updatedAt: timestamp('updated_at', { mode: 'string', withTimezone: true, precision: 3 }),
  createdAt: timestamp('created_at', { mode: 'string', withTimezone: true, precision: 3 }),
})

export const footer_columns_links = pgTable(
  'footer_columns_links',
  {
    _order: integer('_order').notNull(),
    _parentID: varchar('_parent_id').notNull(),
    id: varchar('id').primaryKey(),
    label: varchar('label').notNull(),
    href: varchar('href').notNull(),
    isExternal: boolean('is_external').default(false),
  },
  (columns) => ({
    _orderIdx: index('footer_columns_links_order_idx').on(columns._order),
    _parentIDIdx: index('footer_columns_links_parent_id_idx').on(columns._parentID),
    _parentIDFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [footer_columns.id],
      name: 'footer_columns_links_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const footer_columns = pgTable(
  'footer_columns',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    id: varchar('id').primaryKey(),
    title: varchar('title'),
  },
  (columns) => ({
    _orderIdx: index('footer_columns_order_idx').on(columns._order),
    _parentIDIdx: index('footer_columns_parent_id_idx').on(columns._parentID),
    _parentIDFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [footer.id],
      name: 'footer_columns_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const footer_social = pgTable(
  'footer_social',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    id: varchar('id').primaryKey(),
    network: enum_footer_social_network('network'),
    href: varchar('href').notNull(),
  },
  (columns) => ({
    _orderIdx: index('footer_social_order_idx').on(columns._order),
    _parentIDIdx: index('footer_social_parent_id_idx').on(columns._parentID),
    _parentIDFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [footer.id],
      name: 'footer_social_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const footer = pgTable('footer', {
  id: serial('id').primaryKey(),
  note: varchar('note'),
  updatedAt: timestamp('updated_at', { mode: 'string', withTimezone: true, precision: 3 }),
  createdAt: timestamp('created_at', { mode: 'string', withTimezone: true, precision: 3 }),
})

export const relations_users_sessions = relations(users_sessions, ({ one }) => ({
  _parentID: one(users, {
    fields: [users_sessions._parentID],
    references: [users.id],
    relationName: 'sessions',
  }),
}))
export const relations_users = relations(users, ({ many }) => ({
  sessions: many(users_sessions, {
    relationName: 'sessions',
  }),
}))
export const relations_media = relations(media, () => ({}))
export const relations_discord_roles = relations(discord_roles, () => ({}))
export const relations_categories_rels = relations(categories_rels, ({ one }) => ({
  parent: one(categories, {
    fields: [categories_rels.parent],
    references: [categories.id],
    relationName: '_rels',
  }),
  discordRolesID: one(discord_roles, {
    fields: [categories_rels.discordRolesID],
    references: [discord_roles.id],
    relationName: 'discordRoles',
  }),
  templatesID: one(templates, {
    fields: [categories_rels.templatesID],
    references: [templates.id],
    relationName: 'templates',
  }),
}))
export const relations_categories = relations(categories, ({ one, many }) => ({
  iconKey: one(icons, {
    fields: [categories.iconKey],
    references: [icons.id],
    relationName: 'iconKey',
  }),
  iconColor: one(theme_tokens, {
    fields: [categories.iconColor],
    references: [theme_tokens.id],
    relationName: 'iconColor',
  }),
  _rels: many(categories_rels, {
    relationName: '_rels',
  }),
}))
export const relations_subcategories_rels = relations(subcategories_rels, ({ one }) => ({
  parent: one(subcategories, {
    fields: [subcategories_rels.parent],
    references: [subcategories.id],
    relationName: '_rels',
  }),
  templatesID: one(templates, {
    fields: [subcategories_rels.templatesID],
    references: [templates.id],
    relationName: 'templates',
  }),
  discordRolesID: one(discord_roles, {
    fields: [subcategories_rels.discordRolesID],
    references: [discord_roles.id],
    relationName: 'discordRoles',
  }),
}))
export const relations_subcategories = relations(subcategories, ({ one, many }) => ({
  category: one(categories, {
    fields: [subcategories.category],
    references: [categories.id],
    relationName: 'category',
  }),
  iconKey: one(icons, {
    fields: [subcategories.iconKey],
    references: [icons.id],
    relationName: 'iconKey',
  }),
  iconColor: one(theme_tokens, {
    fields: [subcategories.iconColor],
    references: [theme_tokens.id],
    relationName: 'iconColor',
  }),
  _rels: many(subcategories_rels, {
    relationName: '_rels',
  }),
}))
export const relations_series = relations(series, () => ({}))
export const relations_templates_allowed_blocks = relations(
  templates_allowed_blocks,
  ({ one }) => ({
    parent: one(templates, {
      fields: [templates_allowed_blocks.parent],
      references: [templates.id],
      relationName: 'allowedBlocks',
    }),
  }),
)
export const relations_templates_blocks_rich_text = relations(
  templates_blocks_rich_text,
  ({ one }) => ({
    _parentID: one(templates, {
      fields: [templates_blocks_rich_text._parentID],
      references: [templates.id],
      relationName: '_blocks_richText',
    }),
  }),
)
export const relations_templates_blocks_image = relations(templates_blocks_image, ({ one }) => ({
  _parentID: one(templates, {
    fields: [templates_blocks_image._parentID],
    references: [templates.id],
    relationName: '_blocks_image',
  }),
  media: one(media, {
    fields: [templates_blocks_image.media],
    references: [media.id],
    relationName: 'media',
  }),
}))
export const relations_templates_blocks_image_with_caption = relations(
  templates_blocks_image_with_caption,
  ({ one }) => ({
    _parentID: one(templates, {
      fields: [templates_blocks_image_with_caption._parentID],
      references: [templates.id],
      relationName: '_blocks_imageWithCaption',
    }),
    media: one(media, {
      fields: [templates_blocks_image_with_caption.media],
      references: [media.id],
      relationName: 'media',
    }),
  }),
)
export const relations_templates_blocks_gallery_items = relations(
  templates_blocks_gallery_items,
  ({ one }) => ({
    _parentID: one(templates_blocks_gallery, {
      fields: [templates_blocks_gallery_items._parentID],
      references: [templates_blocks_gallery.id],
      relationName: 'items',
    }),
    media: one(media, {
      fields: [templates_blocks_gallery_items.media],
      references: [media.id],
      relationName: 'media',
    }),
  }),
)
export const relations_templates_blocks_gallery = relations(
  templates_blocks_gallery,
  ({ one, many }) => ({
    _parentID: one(templates, {
      fields: [templates_blocks_gallery._parentID],
      references: [templates.id],
      relationName: '_blocks_gallery',
    }),
    items: many(templates_blocks_gallery_items, {
      relationName: 'items',
    }),
  }),
)
export const relations_templates_blocks_media_text = relations(
  templates_blocks_media_text,
  ({ one }) => ({
    _parentID: one(templates, {
      fields: [templates_blocks_media_text._parentID],
      references: [templates.id],
      relationName: '_blocks_mediaText',
    }),
    media: one(media, {
      fields: [templates_blocks_media_text.media],
      references: [media.id],
      relationName: 'media',
    }),
  }),
)
export const relations_templates_blocks_video_embed = relations(
  templates_blocks_video_embed,
  ({ one }) => ({
    _parentID: one(templates, {
      fields: [templates_blocks_video_embed._parentID],
      references: [templates.id],
      relationName: '_blocks_videoEmbed',
    }),
  }),
)
export const relations_templates_blocks_cta = relations(templates_blocks_cta, ({ one }) => ({
  _parentID: one(templates, {
    fields: [templates_blocks_cta._parentID],
    references: [templates.id],
    relationName: '_blocks_cta',
  }),
}))
export const relations_templates = relations(templates, ({ one, many }) => ({
  defaultIconKey: one(icons, {
    fields: [templates.defaultIconKey],
    references: [icons.id],
    relationName: 'defaultIconKey',
  }),
  defaultColorToken: one(theme_tokens, {
    fields: [templates.defaultColorToken],
    references: [theme_tokens.id],
    relationName: 'defaultColorToken',
  }),
  allowedBlocks: many(templates_allowed_blocks, {
    relationName: 'allowedBlocks',
  }),
  _blocks_richText: many(templates_blocks_rich_text, {
    relationName: '_blocks_richText',
  }),
  _blocks_image: many(templates_blocks_image, {
    relationName: '_blocks_image',
  }),
  _blocks_imageWithCaption: many(templates_blocks_image_with_caption, {
    relationName: '_blocks_imageWithCaption',
  }),
  _blocks_gallery: many(templates_blocks_gallery, {
    relationName: '_blocks_gallery',
  }),
  _blocks_mediaText: many(templates_blocks_media_text, {
    relationName: '_blocks_mediaText',
  }),
  _blocks_videoEmbed: many(templates_blocks_video_embed, {
    relationName: '_blocks_videoEmbed',
  }),
  _blocks_cta: many(templates_blocks_cta, {
    relationName: '_blocks_cta',
  }),
}))
export const relations_pages_blocks_rich_text = relations(pages_blocks_rich_text, ({ one }) => ({
  _parentID: one(pages, {
    fields: [pages_blocks_rich_text._parentID],
    references: [pages.id],
    relationName: '_blocks_richText',
  }),
}))
export const relations_pages_blocks_image = relations(pages_blocks_image, ({ one }) => ({
  _parentID: one(pages, {
    fields: [pages_blocks_image._parentID],
    references: [pages.id],
    relationName: '_blocks_image',
  }),
  media: one(media, {
    fields: [pages_blocks_image.media],
    references: [media.id],
    relationName: 'media',
  }),
}))
export const relations_pages_blocks_image_with_caption = relations(
  pages_blocks_image_with_caption,
  ({ one }) => ({
    _parentID: one(pages, {
      fields: [pages_blocks_image_with_caption._parentID],
      references: [pages.id],
      relationName: '_blocks_imageWithCaption',
    }),
    media: one(media, {
      fields: [pages_blocks_image_with_caption.media],
      references: [media.id],
      relationName: 'media',
    }),
  }),
)
export const relations_pages_blocks_gallery_items = relations(
  pages_blocks_gallery_items,
  ({ one }) => ({
    _parentID: one(pages_blocks_gallery, {
      fields: [pages_blocks_gallery_items._parentID],
      references: [pages_blocks_gallery.id],
      relationName: 'items',
    }),
    media: one(media, {
      fields: [pages_blocks_gallery_items.media],
      references: [media.id],
      relationName: 'media',
    }),
  }),
)
export const relations_pages_blocks_gallery = relations(pages_blocks_gallery, ({ one, many }) => ({
  _parentID: one(pages, {
    fields: [pages_blocks_gallery._parentID],
    references: [pages.id],
    relationName: '_blocks_gallery',
  }),
  items: many(pages_blocks_gallery_items, {
    relationName: 'items',
  }),
}))
export const relations_pages_blocks_media_text = relations(pages_blocks_media_text, ({ one }) => ({
  _parentID: one(pages, {
    fields: [pages_blocks_media_text._parentID],
    references: [pages.id],
    relationName: '_blocks_mediaText',
  }),
  media: one(media, {
    fields: [pages_blocks_media_text.media],
    references: [media.id],
    relationName: 'media',
  }),
}))
export const relations_pages_blocks_video_embed = relations(
  pages_blocks_video_embed,
  ({ one }) => ({
    _parentID: one(pages, {
      fields: [pages_blocks_video_embed._parentID],
      references: [pages.id],
      relationName: '_blocks_videoEmbed',
    }),
  }),
)
export const relations_pages_blocks_cta = relations(pages_blocks_cta, ({ one }) => ({
  _parentID: one(pages, {
    fields: [pages_blocks_cta._parentID],
    references: [pages.id],
    relationName: '_blocks_cta',
  }),
}))
export const relations_pages = relations(pages, ({ one, many }) => ({
  subcategory: one(subcategories, {
    fields: [pages.subcategory],
    references: [subcategories.id],
    relationName: 'subcategory',
  }),
  series: one(series, {
    fields: [pages.series],
    references: [series.id],
    relationName: 'series',
  }),
  template: one(templates, {
    fields: [pages.template],
    references: [templates.id],
    relationName: 'template',
  }),
  iconKey: one(icons, {
    fields: [pages.iconKey],
    references: [icons.id],
    relationName: 'iconKey',
  }),
  iconColor: one(theme_tokens, {
    fields: [pages.iconColor],
    references: [theme_tokens.id],
    relationName: 'iconColor',
  }),
  _blocks_richText: many(pages_blocks_rich_text, {
    relationName: '_blocks_richText',
  }),
  _blocks_image: many(pages_blocks_image, {
    relationName: '_blocks_image',
  }),
  _blocks_imageWithCaption: many(pages_blocks_image_with_caption, {
    relationName: '_blocks_imageWithCaption',
  }),
  _blocks_gallery: many(pages_blocks_gallery, {
    relationName: '_blocks_gallery',
  }),
  _blocks_mediaText: many(pages_blocks_media_text, {
    relationName: '_blocks_mediaText',
  }),
  _blocks_videoEmbed: many(pages_blocks_video_embed, {
    relationName: '_blocks_videoEmbed',
  }),
  _blocks_cta: many(pages_blocks_cta, {
    relationName: '_blocks_cta',
  }),
}))
export const relations_icons = relations(icons, () => ({}))
export const relations_theme_tokens = relations(theme_tokens, () => ({}))
export const relations_payload_locked_documents_rels = relations(
  payload_locked_documents_rels,
  ({ one }) => ({
    parent: one(payload_locked_documents, {
      fields: [payload_locked_documents_rels.parent],
      references: [payload_locked_documents.id],
      relationName: '_rels',
    }),
    usersID: one(users, {
      fields: [payload_locked_documents_rels.usersID],
      references: [users.id],
      relationName: 'users',
    }),
    mediaID: one(media, {
      fields: [payload_locked_documents_rels.mediaID],
      references: [media.id],
      relationName: 'media',
    }),
    discordRolesID: one(discord_roles, {
      fields: [payload_locked_documents_rels.discordRolesID],
      references: [discord_roles.id],
      relationName: 'discordRoles',
    }),
    categoriesID: one(categories, {
      fields: [payload_locked_documents_rels.categoriesID],
      references: [categories.id],
      relationName: 'categories',
    }),
    subcategoriesID: one(subcategories, {
      fields: [payload_locked_documents_rels.subcategoriesID],
      references: [subcategories.id],
      relationName: 'subcategories',
    }),
    seriesID: one(series, {
      fields: [payload_locked_documents_rels.seriesID],
      references: [series.id],
      relationName: 'series',
    }),
    templatesID: one(templates, {
      fields: [payload_locked_documents_rels.templatesID],
      references: [templates.id],
      relationName: 'templates',
    }),
    pagesID: one(pages, {
      fields: [payload_locked_documents_rels.pagesID],
      references: [pages.id],
      relationName: 'pages',
    }),
    iconsID: one(icons, {
      fields: [payload_locked_documents_rels.iconsID],
      references: [icons.id],
      relationName: 'icons',
    }),
    themeTokensID: one(theme_tokens, {
      fields: [payload_locked_documents_rels.themeTokensID],
      references: [theme_tokens.id],
      relationName: 'themeTokens',
    }),
  }),
)
export const relations_payload_locked_documents = relations(
  payload_locked_documents,
  ({ many }) => ({
    _rels: many(payload_locked_documents_rels, {
      relationName: '_rels',
    }),
  }),
)
export const relations_payload_preferences_rels = relations(
  payload_preferences_rels,
  ({ one }) => ({
    parent: one(payload_preferences, {
      fields: [payload_preferences_rels.parent],
      references: [payload_preferences.id],
      relationName: '_rels',
    }),
    usersID: one(users, {
      fields: [payload_preferences_rels.usersID],
      references: [users.id],
      relationName: 'users',
    }),
  }),
)
export const relations_payload_preferences = relations(payload_preferences, ({ many }) => ({
  _rels: many(payload_preferences_rels, {
    relationName: '_rels',
  }),
}))
export const relations_payload_migrations = relations(payload_migrations, () => ({}))
export const relations_nav_items_subcategories_pages = relations(
  nav_items_subcategories_pages,
  ({ one }) => ({
    _parentID: one(nav_items_subcategories, {
      fields: [nav_items_subcategories_pages._parentID],
      references: [nav_items_subcategories.id],
      relationName: 'pages',
    }),
    page: one(pages, {
      fields: [nav_items_subcategories_pages.page],
      references: [pages.id],
      relationName: 'page',
    }),
  }),
)
export const relations_nav_items_subcategories = relations(
  nav_items_subcategories,
  ({ one, many }) => ({
    _parentID: one(nav_items, {
      fields: [nav_items_subcategories._parentID],
      references: [nav_items.id],
      relationName: 'subcategories',
    }),
    subcategory: one(subcategories, {
      fields: [nav_items_subcategories.subcategory],
      references: [subcategories.id],
      relationName: 'subcategory',
    }),
    pages: many(nav_items_subcategories_pages, {
      relationName: 'pages',
    }),
  }),
)
export const relations_nav_items = relations(nav_items, ({ one, many }) => ({
  _parentID: one(nav, {
    fields: [nav_items._parentID],
    references: [nav.id],
    relationName: 'items',
  }),
  category: one(categories, {
    fields: [nav_items.category],
    references: [categories.id],
    relationName: 'category',
  }),
  iconKeyOverride: one(icons, {
    fields: [nav_items.iconKeyOverride],
    references: [icons.id],
    relationName: 'iconKeyOverride',
  }),
  iconColorOverride: one(theme_tokens, {
    fields: [nav_items.iconColorOverride],
    references: [theme_tokens.id],
    relationName: 'iconColorOverride',
  }),
  subcategories: many(nav_items_subcategories, {
    relationName: 'subcategories',
  }),
}))
export const relations_nav = relations(nav, ({ many }) => ({
  items: many(nav_items, {
    relationName: 'items',
  }),
}))
export const relations_footer_columns_links = relations(footer_columns_links, ({ one }) => ({
  _parentID: one(footer_columns, {
    fields: [footer_columns_links._parentID],
    references: [footer_columns.id],
    relationName: 'links',
  }),
}))
export const relations_footer_columns = relations(footer_columns, ({ one, many }) => ({
  _parentID: one(footer, {
    fields: [footer_columns._parentID],
    references: [footer.id],
    relationName: 'columns',
  }),
  links: many(footer_columns_links, {
    relationName: 'links',
  }),
}))
export const relations_footer_social = relations(footer_social, ({ one }) => ({
  _parentID: one(footer, {
    fields: [footer_social._parentID],
    references: [footer.id],
    relationName: 'social',
  }),
}))
export const relations_footer = relations(footer, ({ many }) => ({
  columns: many(footer_columns, {
    relationName: 'columns',
  }),
  social: many(footer_social, {
    relationName: 'social',
  }),
}))

type DatabaseSchema = {
  enum_discord_roles_source: typeof enum_discord_roles_source
  enum_categories_read_policy: typeof enum_categories_read_policy
  enum_subcategories_read_policy: typeof enum_subcategories_read_policy
  enum_templates_allowed_blocks: typeof enum_templates_allowed_blocks
  enum_templates_blocks_media_text_media_position: typeof enum_templates_blocks_media_text_media_position
  enum_pages_blocks_media_text_media_position: typeof enum_pages_blocks_media_text_media_position
  enum_footer_social_network: typeof enum_footer_social_network
  users_sessions: typeof users_sessions
  users: typeof users
  media: typeof media
  discord_roles: typeof discord_roles
  categories: typeof categories
  categories_rels: typeof categories_rels
  subcategories: typeof subcategories
  subcategories_rels: typeof subcategories_rels
  series: typeof series
  templates_allowed_blocks: typeof templates_allowed_blocks
  templates_blocks_rich_text: typeof templates_blocks_rich_text
  templates_blocks_image: typeof templates_blocks_image
  templates_blocks_image_with_caption: typeof templates_blocks_image_with_caption
  templates_blocks_gallery_items: typeof templates_blocks_gallery_items
  templates_blocks_gallery: typeof templates_blocks_gallery
  templates_blocks_media_text: typeof templates_blocks_media_text
  templates_blocks_video_embed: typeof templates_blocks_video_embed
  templates_blocks_cta: typeof templates_blocks_cta
  templates: typeof templates
  pages_blocks_rich_text: typeof pages_blocks_rich_text
  pages_blocks_image: typeof pages_blocks_image
  pages_blocks_image_with_caption: typeof pages_blocks_image_with_caption
  pages_blocks_gallery_items: typeof pages_blocks_gallery_items
  pages_blocks_gallery: typeof pages_blocks_gallery
  pages_blocks_media_text: typeof pages_blocks_media_text
  pages_blocks_video_embed: typeof pages_blocks_video_embed
  pages_blocks_cta: typeof pages_blocks_cta
  pages: typeof pages
  icons: typeof icons
  theme_tokens: typeof theme_tokens
  payload_locked_documents: typeof payload_locked_documents
  payload_locked_documents_rels: typeof payload_locked_documents_rels
  payload_preferences: typeof payload_preferences
  payload_preferences_rels: typeof payload_preferences_rels
  payload_migrations: typeof payload_migrations
  nav_items_subcategories_pages: typeof nav_items_subcategories_pages
  nav_items_subcategories: typeof nav_items_subcategories
  nav_items: typeof nav_items
  nav: typeof nav
  footer_columns_links: typeof footer_columns_links
  footer_columns: typeof footer_columns
  footer_social: typeof footer_social
  footer: typeof footer
  relations_users_sessions: typeof relations_users_sessions
  relations_users: typeof relations_users
  relations_media: typeof relations_media
  relations_discord_roles: typeof relations_discord_roles
  relations_categories_rels: typeof relations_categories_rels
  relations_categories: typeof relations_categories
  relations_subcategories_rels: typeof relations_subcategories_rels
  relations_subcategories: typeof relations_subcategories
  relations_series: typeof relations_series
  relations_templates_allowed_blocks: typeof relations_templates_allowed_blocks
  relations_templates_blocks_rich_text: typeof relations_templates_blocks_rich_text
  relations_templates_blocks_image: typeof relations_templates_blocks_image
  relations_templates_blocks_image_with_caption: typeof relations_templates_blocks_image_with_caption
  relations_templates_blocks_gallery_items: typeof relations_templates_blocks_gallery_items
  relations_templates_blocks_gallery: typeof relations_templates_blocks_gallery
  relations_templates_blocks_media_text: typeof relations_templates_blocks_media_text
  relations_templates_blocks_video_embed: typeof relations_templates_blocks_video_embed
  relations_templates_blocks_cta: typeof relations_templates_blocks_cta
  relations_templates: typeof relations_templates
  relations_pages_blocks_rich_text: typeof relations_pages_blocks_rich_text
  relations_pages_blocks_image: typeof relations_pages_blocks_image
  relations_pages_blocks_image_with_caption: typeof relations_pages_blocks_image_with_caption
  relations_pages_blocks_gallery_items: typeof relations_pages_blocks_gallery_items
  relations_pages_blocks_gallery: typeof relations_pages_blocks_gallery
  relations_pages_blocks_media_text: typeof relations_pages_blocks_media_text
  relations_pages_blocks_video_embed: typeof relations_pages_blocks_video_embed
  relations_pages_blocks_cta: typeof relations_pages_blocks_cta
  relations_pages: typeof relations_pages
  relations_icons: typeof relations_icons
  relations_theme_tokens: typeof relations_theme_tokens
  relations_payload_locked_documents_rels: typeof relations_payload_locked_documents_rels
  relations_payload_locked_documents: typeof relations_payload_locked_documents
  relations_payload_preferences_rels: typeof relations_payload_preferences_rels
  relations_payload_preferences: typeof relations_payload_preferences
  relations_payload_migrations: typeof relations_payload_migrations
  relations_nav_items_subcategories_pages: typeof relations_nav_items_subcategories_pages
  relations_nav_items_subcategories: typeof relations_nav_items_subcategories
  relations_nav_items: typeof relations_nav_items
  relations_nav: typeof relations_nav
  relations_footer_columns_links: typeof relations_footer_columns_links
  relations_footer_columns: typeof relations_footer_columns
  relations_footer_social: typeof relations_footer_social
  relations_footer: typeof relations_footer
}

declare module '@payloadcms/db-postgres' {
  export interface GeneratedDatabaseSchema {
    schema: DatabaseSchema
  }
}
